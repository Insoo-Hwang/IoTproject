AWS DynamoDB에 접속하여 이름이 Final, 기본키가 time(숫자)인 테이블 생성

AWS Lambda 프로젝트를 Eclipse AWS Toolkit을 이용해 생성한다.
  Project name : RecordingUltrasonic
  Class name : RecordingUltrasonicHandler
  Input Type : Custom
   
RecordingUltrasonicHandler.java 파일을 열고 다음으로 코드를 수정함

import java.text.SimpleDateFormat;
import java.util.TimeZone;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.PutItemOutcome;
import com.amazonaws.services.dynamodbv2.document.spec.PutItemSpec;
import com.amazonaws.services.dynamodbv2.model.ConditionalCheckFailedException;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

public class RecordingUltrasonicHandler implements RequestHandler<Thing, String> {
   private DynamoDB dynamoDb;
   private String DYNAMODB_TABLE_NAME = "Final"; //dynamoDB의 이름

   @Override
   public String handleRequest(Thing input, Context context) {
      
      if(Double.valueOf(input.state.reported.Distance) > 50) {  // 거리 값이 50보다 작을 경우, 저장하지 않는다
         return "Too Long";
      }
      
      this.initDynamoDbClient();
      persistData(input);
      return "Success   in   storing   to   DB!";
   }

   private PutItemOutcome persistData(Thing thing) throws ConditionalCheckFailedException {
      // Epoch Conversion Code: https://www.epochconverter.com/
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd   HH:mm:ss");
      sdf.setTimeZone(TimeZone.getTimeZone("Asia/Seoul"));
      String timeString = sdf.format(new java.util.Date(thing.timestamp * 1000));
      
      return this.dynamoDb.getTable(DYNAMODB_TABLE_NAME)
            .putItem(new PutItemSpec().withItem(new Item().withPrimaryKey("time", thing.timestamp)
                  .withString("Distance", thing.state.reported.Distance)
                  .withString("LED0", thing.state.reported.LED0).withString("timestamp", timeString))); //dynamoDB에 저장될 속성 정의
   }

   private void initDynamoDbClient() {
      AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion("us-east-1").build();
      this.dynamoDb = new DynamoDB(client);
   }
}

class Thing {
   public State state = new State();
   public long timestamp;

   public class State {
      public Tag reported = new Tag();
      public Tag desired = new Tag();

      public class Tag {
         public String LED0;
         public String LED1;
         public String LED2;
         public String BUTTON1;
         public String BUTTON2;
         public String Distance;
         public String temperature;
      }
   }
}

Upload function to AWS Lamda를 선택 후, 함수 이름을 Dynamodb, IAM을 dynamodbAccess정책이 연결된 역할로 설정 후 Finish를 눌러 AWS에 업로드

AWS IoT Core에 접속하여 동작의 규칙을 선택한다 -> 전에 만든 UltrasonicRule을 선택 후 작업에서 메시지 데이터를 전달하는 Lambda함수에 Dynamodb를 추가함

초음파에 손을 갖다 대면 dynamoDB에 저장되는지 확인
